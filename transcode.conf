# transcode.conf - configuration file for transcode.py

# on Linux/BSD, copy this file to one of the locations below:
#   ~/.transcode
#   /usr/local/etc/transcode.conf
#   /etc/transcode.conf
# or keep in same directory as transcode.py

# add one of the following suffixes to any option to make the option apply
# only when a particular codec or setting is chosen:
# .mp4 .mkv .h264 .vp8 .aac .vorbis .flac .ipod .webm
# .one_pass .two_pass .faac .nero .ffmpeg-aac .movie
# for example, 'final_path.ipod = E:\Music\iTunes' will output all video
# encoded for iPod Touch compatibility to E:\Music\iTunes

# --- General options ---


# directory to store encoded video file
final_path = ~/Videos

# temporary directory to use while encoding
# (if left blank, a temporary directory will be created)
tmp = 

# format string for the encoded video filename. some examples:
# '%T/%T - %S' -> 'Show/Show - Episode'
# '%C/%T/%o - %S' -> 'Genre/Show/1x23 - Episode'
# '%oY/%T (%sx%e) - %S' -> '2012/Show (1x23) - Episode'
# '%T (%oy)' -> 'Movie (1984)'
# see transcode.py for more details
format = %T/%T - %S
format.movie = %T (%oy)

# character to substitute for invalid filename characters
# (if left blank, invalid characters will be removed)
replace_char = 

# two-letter language code (ISO 639-2) of the audio track to be obtained
# also used for TMDb / Tvdb metadata searches
language = en

# two-letter country code (ISO 3166-1) of the country where the video was
# recorded. used for TMDb to obtain a parental rating
# (e.g., PG, PG-13, R) for movies
country = US


# --- MythTV options ---


# MythTV database host (change this if using MythTV)
host = 127.0.0.1

# MySQL database for MythTV (usually 'mythconverg')
database = mythconverg

# MySQL username for MythTV (usually 'mythtv')
user = mythtv

# MySQL password for MythTV (usually 'mythtv')
password = mythtv

# MythTV security PIN (or 0000 if not set)
pin = 0000

# whether to import the transcoded video back into MythTV's recording database
import_mythtv = no


# --- Media format options ---


# the media container file type to use - MPEG-4 (mp4) or Matroska (mkv)
container = mp4

# the codec to use for encoding video - H.264 or VP8
# (only H.264 is supported for MPEG-4 files)
video.mp4 = h264
video.mkv = vp8

# the codec to use for encoding audio - AAC, Ogg Vorbis or FLAC
# (only AAC is supported for MPEG-4 files)
audio.mp4 = aac
audio.mkv = vorbis

# use iPod Touch compatibility settings:
# - use the MPEG-4 format and the H.264 / AAC codecs
# - use ffmpeg output format 'ipod'
ipod = no

# encode WebM compliant video:
# - use the Matroska format and the VP8 / Ogg Vorbis codecs
# - use ffmpeg output format 'webm'
# - the WebM format does not allow any tags, chapters or subtitles
webm = no


# --- Video encoding options ---


# whether to use two-pass encoding
# (usually used to target a specific filesize for the the video)
two_pass = no

# x264 ratecontrol method to use - constant bitrate or constant ratefactor
# http://mewiki.project357.com/wiki/X264_Settings#Ratecontrol
h264_rc.one_pass = crf
h264_rc.two_pass = cbr

# libvpx ratecontrol method to use - variable bitrate or constant birate
# http://www.webmproject.org/tools/encoder-parameters/#vbr_cbr_and_cq_mode
vp8_rc = vbr

# target video bitrate, when using constant or variable bitrate (in KB/s)
video_br = 1920

# target H.264 video quality ratio, when using constant ratefactor
# (about 15 to 25 is ideal. lower numbers give better quality)
video_crf = 23

# ffmpeg preset file to use (if not specified, no preset is used)
# on Linux/BSD, these can usually be found in /usr/share/ffmpeg
# on Windows, look for a directory called 'ffpresets' or 'presets'
preset =
preset.ipod = ipod640

# x264 encoding speed (preset) - slow, medium, fast, faster...
# (slow or medium is recommended)
h264_speed = slow

# libvpx encoding speed (--cpu-used) to use - 0 to 5
# (0, 1 or 2 are recommended)
vp8_speed = 0

# amount of concurrent threads of execution to use when transcoding video
# if set to zero, ffmpeg will decide how many to use
# (number of processor's real cores, minus one, is recommended)
threads = 0

# target video resolution or aspect ratio, using one of these formats:
# '640x480' - width and height
# '480p', '480p60', '720p', '1080p' - predefined TV resolutions
# '16:9' - use the video height and this ratio to calculate the desired width
# 'closest' - use whatever standard resolution is closest to the source
# the aspect ratio of the source file will be preserved, and black padding on
# either the top and bottom or sides will be added if necessary
# if not specified, the video resolution is unchanged
resolution =
resolution.ipod = 480p

# whether to use FFmpeg's 'cropdetect' video filter to automatically detect
# and remove black spacing around the source video
# (rather than using the exact value reported, the video will be cropped
# by determining the closest aspect ratio: 4:3, 16:9 or 2.35:1)
auto_crop = yes

# whether to use FFmpeg's 'yadif' video filter to deinterlace the source
# video, eliminating alternating, jittering lines usually present in
# raw TV broadcasts
deinterlace = yes


# --- Audio encoding options ---

# the encoder to use for AAC audio - faac, nero, or ffmpeg-aac
# (faac requires FFmpeg to be compiled with --enable-libfaac,
#  and nero requires neroAacEnc to be installed)
aac_encoder = nero

# neroAacEnc audio quality ratio - 0 to 1, higher values give better quality
audio_q = 0.55

# libfaac / libvorbis audio bitrate (in KB/s)
audio_br = 192

# some digital TV programs broadcast in 5.1 surround sound - if this setting
# is enabled, these recordings will be transcoded with stereo sound instead
downmix_to_stereo = no


# --- Metadata options ---


# whether to include the Tvdb episode rating (1 to 10)
# or TMDb movie rating (1 to 10) as voted by users
use_db_rating = yes

# whether to prefer to use episode descriptions from Tvdb
# (or movie descriptions from TMDb) when available
use_db_descriptions = no


# --- Miscellaneous options ---


# avoid printing to stdout
quiet = no

# print command output to stdout
verbose = no

# when removing commercials, ignore any short clips this many seconds
# from beginning or end of the video
clip_thresh = 5

# path to the Project-X JAR file (used for noise cleaning / cutting)
projectx = project-x/ProjectX.jar

# path to remuxTool.jar (used for extracting MPEG-2 data from WTV files)
remuxtool = remuxTool.jar
